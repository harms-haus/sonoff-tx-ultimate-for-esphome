substitutions:
  name: "tx-ultimate"
  friendly_name: "tx-ultimate"
  
  api_key: "6mh9itkac9j5Tx3b/aeCQUu2X+pQXEQtBJR2lx09yjA="

  fallback_ap_ssid: "txultimate-ap"
  fallback_ap_password: "Tk3375kUzefs"

  ota_platform: "esphome"
  ota_password: "6f443899d792443e1980acb1528af4fd"

  vibra_time: 50ms

  relay_1_pin: GPIO18
  relay_2_pin: GPIO17
  relay_3_pin: GPIO27
  relay_4_pin: GPIO23

  vibra_motor_pin: GPIO21
  pa_power_pin: GPIO26

  led_pin: GPIO13
  status_led_pin: GPIO33

  uart_tx_pin: GPIO19
  uart_rx_pin: GPIO22

  audio_lrclk_pin: GPIO4
  audio_bclk_pin: GPIO2
  audio_sdata_pin: GPIO15

  touchpanel_power_pin: GPIO5

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  project:
    name: smarthomeyourself.tx_ultimate
    version: "1.0"

  on_boot:
    priority: -100
    then:
      - script.execute: initstates

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
  #  hardware_uart: UART2
  level: DEBUG
  logs:
    binary_sensor: INFO
    light: INFO
    script: INFO
    switch: INFO
    tx_ultimate_touch: INFO
    uart_debug: INFO

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
api:
  encryption:
    key: ${api_key}
    
# Enable fallback hotspot (captive portal) in case wifi connection fails
# ap:
#   ssid: ${fallback_ap_ssid}
#   password: ${fallback_ap_password}
captive_portal:
ota:
  - platform: ${ota_platform}
    password: ${ota_password}

web_server:
  port: 80


external_components:
  - source:  
      type: git
      url: https://github.com/harms-haus/sonoff-tx-ultimate-for-esphome
      ref: main
    components: [tx_ultimate_touch]


globals:
  # relay attached to buttons: 0: padding, 1-4: buttons/relays attached state
  - id: relay_attached
    type: bool[5]
    restore_value: true

  # virtual toggles: 0: nightlight on/off, 1-4: button virtual states, 5: night mode (separate global brightness mode)
  - id: virtual_relay_state
    type: bool[6]
    restore_value: true
    initial_value: "{false, false, false, false, false, false}"

  # active colors (0-255): 0,1,2: nightlight color, 3-14: button active colors (in groups of 3, for buttons 1-4) 
  - id: active_color
    type: unsigned char[15]
    restore_value: true
    initial_value: "{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255}"

  # global brightness settings (0-255): 0: off brightness, 1: daytime on brightness, 2: night mode on brightness, 3: touch brightness
  - id: global_brightness
    type: unsigned char[4]
    restore_value: true
    initial_value: "{0,110,50,110}"

  # global transition settings (0-1000): 0: off transition, 1: daytime on transition, 2: night mode on transition, 3: touch-on transition, 4: touch-off transition
  - id: global_transition_ms
    type: unsigned int[5]
    restore_value: true
    initial_value: "{1000,1000,1000,0,1000}"

  # global transition settings: 0: off transition, 1: daytime on transition, 2: night mode on transition, 3: touch-on transition, 4: touch-off transition
  - id: button_touch_decay_ms
    type: unsigned int
    restore_value: true
    initial_value: "500"

switch:
  # relays
  - id: relay_1
    platform: gpio
    name: "Button 1 Relay"
    pin: ${relay_1_pin}
    restore_mode: RESTORE_DEFAULT_ON
  - id: relay_2
    platform: gpio
    name: "Button 2 Relay"
    pin: ${relay_2_pin}
    restore_mode: RESTORE_DEFAULT_ON
  - id: relay_3
    platform: gpio
    name: "Button 3 Relay"
    pin: ${relay_3_pin}
    restore_mode: RESTORE_DEFAULT_ON
  - id: relay_4
    platform: gpio
    name: "Button 4 Relay"
    pin: ${relay_4_pin}
    restore_mode: RESTORE_DEFAULT_ON

  # vibration motor
  - id: motor
    platform: gpio
    pin: ${vibra_motor_pin}
    name: "Vibration"
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: ${vibra_time}
      - switch.turn_off: motor

  # power
  - id: pa_power
    platform: gpio
    pin: ${pa_power_pin}
    name: "PA Power"
    internal: true
    restore_mode: ALWAYS_ON
  - id: touch_power
    platform: gpio
    name: "touch panel power"
    pin:
      number: ${touchpanel_power_pin}
      inverted: true
    internal: true
    restore_mode: RESTORE_DEFAULT_ON

  - id: restartbutton
    platform: restart
    name: "Restart"
    internal: false

  # "detached" mode to unlink touch event from relay
  - id: relay_1_detached
    platform: template
    name: "Button 1 Detached"
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: !lambda return !id(relay_attached)[1];
    turn_on_action:
      then:
        - lambda: !lambda id(relay_attached)[1] = false;
        - script.execute: 
            id: reset_button_leds
            btn: 1
    turn_off_action:
      then:
        - lambda: !lambda id(relay_attached)[1] = true;
        - script.execute: 
            id: reset_button_leds
            btn: 1
  - id: relay_2_detached
    platform: template
    name: "Button 2 Detached"
    restore_mode: RESTORE_DEFAULT_ON
    lambda: !lambda return !id(relay_attached)[2];
    turn_on_action:
      then:
        - lambda: !lambda id(relay_attached)[2] = false;
        - script.execute: 
            id: reset_button_leds
            btn: 2
    turn_off_action:
      then:
        - lambda: !lambda id(relay_attached)[2] = true;
        - script.execute: 
            id: reset_button_leds
            btn: 2
  - id: relay_3_detached
    platform: template
    name: "Button 3 Detached"
    restore_mode: RESTORE_DEFAULT_ON
    lambda: !lambda return !id(relay_attached)[3];
    turn_on_action:
      then:
        - lambda: !lambda id(relay_attached)[3] = false;
        - script.execute: 
            id: reset_button_leds
            btn: 3
    turn_off_action:
      then:
        - lambda: !lambda id(relay_attached)[3] = true;
        - script.execute: 
            id: reset_button_leds
            btn: 3
  - id: relay_4_detached
    platform: template
    name: "Button 4 Detached"
    restore_mode: RESTORE_DEFAULT_ON
    lambda: !lambda return !id(relay_attached)[4];
    turn_on_action:
      then:
        - lambda: !lambda id(relay_attached)[4] = false;
        - script.execute: 
            id: reset_button_leds
            btn: 4
    turn_off_action:
      then:
        - lambda: !lambda id(relay_attached)[4] = true;
        - script.execute: 
            id: reset_button_leds
            btn: 4
    
  # button states (relay state if "detached" mode is off, virtual button state in "detached" mode)
  - id: button_1
    platform: template
    name: "Button 1"
    lambda: |-
      if (id(relay_1_detached).state) {
        return id(virtual_relay_state)[1];
      } else {
        return id(relay_1).state;
      }
    turn_on_action:
      then:
        - script.execute: 
            id: button_on
            btn: 1
    turn_off_action:
      then:
        - script.execute: 
            id: button_off
            btn: 1
  - id: button_2
    platform: template
    name: "Button 2"
    lambda: |-
      if (id(relay_2_detached).state) {
        return id(virtual_relay_state)[2];
      } else {
        return id(relay_2).state;
      }
    turn_on_action:
      then:
        - script.execute: 
            id: button_on
            btn: 2
    turn_off_action:
      then:
        - script.execute: 
            id: button_off
            btn: 2
  - id: button_3
    platform: template
    name: "Button 3"
    lambda: |-
      if (id(relay_3_detached).state) {
        return id(virtual_relay_state)[3];
      } else {
        return id(relay_3).state;
      }
    turn_on_action:
      then:
        - script.execute: 
            id: button_on
            btn: 3
    turn_off_action:
      then:
        - script.execute: 
            id: button_off
            btn: 3
  - id: button_4
    platform: template
    name: "Button 4"
    lambda: |-
      if (id(relay_4_detached).state) {
        return id(virtual_relay_state)[4];
      } else {
        return id(relay_4).state;
      }
    turn_on_action:
      then:
        - script.execute: 
            id: button_on
            btn: 4
    turn_off_action:
      then:
        - script.execute: 
            id: button_off
            btn: 4

  # nightlight
  - id: nightlight_active
    platform: template
    name: "Nightlight"
    lambda: !lambda return id(virtual_relay_state)[0];
    turn_on_action:
        - lambda: !lambda id(virtual_relay_state)[0] = true;
        - script.execute: update_leds
    turn_off_action:
      then:
        - lambda: !lambda id(virtual_relay_state)[0] = false;
        - script.execute: update_leds
  
  # night mode (more-dim mode)
  - id: night_mode
    platform: template
    name: "Night Mode"
    lambda: !lambda return id(virtual_relay_state)[5];
    turn_on_action:
        - lambda: !lambda id(virtual_relay_state)[5] = true;
        - script.execute: update_leds
    turn_off_action:
      then:
        - lambda: !lambda id(virtual_relay_state)[5] = false;
        - script.execute: update_leds

light:
  # hardware LED strip
  - id: leds
    platform: neopixelbus
    type: GRB
    variant: WS2812       
    pin: ${led_pin}
    num_leds: 32
    name: "LEDs"
    default_transition_length: 0s
    effects:
      - addressable_rainbow:
          name: "Rainbow"
          speed: 30
          width: 8
      - pulse:
          name: "Pulse"
          transition_length: 1.4s
          update_interval: 1s

  # button partitions (left/right side of each button)
  - id: button_1_leds
    platform: partition
    name: "LEDs Button 1"
    internal: false
    segments:  
      - id: leds
        from: 31
        to: 31
      - id: leds
        from: 0
        to: 0
      - id: leds
        from: 23
        to: 24
  - id: button_2_leds
    platform: partition
    name: "LEDs Button 2"
    internal: false
    segments:
      - id: leds
        from: 1
        to: 2
      - id: leds
        from: 21
        to: 22
  - id: button_3_leds
    platform: partition
    name: "LEDs Button 3"
    internal: false
    segments:
      - id: leds
        from: 5
        to: 6
      - id: leds
        from: 17
        to: 18
  - id: button_4_leds
    platform: partition
    name: "LEDs Button 4"
    internal: false
    segments:
      - id: leds
        from: 7
        to: 8
      - id: leds
        from: 15
        to: 16

  # sides of the panel
  - id: leds_right
    platform: partition
    name: "LEDs Right"
    internal: false
    segments:
      - id: leds
        from: 31
        to: 31
      - id: leds
        from: 0
        to: 9
  - id: leds_bottom
    platform: partition
    name: "LEDs Bottom"
    internal: false
    segments:
      - id: leds
        from: 9
        to: 14
  - id: leds_left
    platform: partition
    name: "LEDs Left"
    internal: false
    segments:
      - id: leds
        from: 15
        to: 24
  - id: leds_top
    platform: partition
    name: "LEDs Top"
    internal: false
    segments:
      - id: leds
        from: 25
        to: 30
    
  # notify areas
  - id: notify_leds_right
    platform: partition
    name: "Notify LEDs Right"
    internal: false
    segments:
      - id: leds
        from: 3
        to: 4
  - id: notify_leds_bottom
    platform: partition
    name: "Notify LEDs Bottom"
    internal: false
    segments:
      - id: leds
        from: 10
        to: 13
  - id: notify_leds_left
    platform: partition
    name: "Notify LEDs Left"
    internal: false
    segments:
      - id: leds
        from: 19
        to: 20
  - id: notify_leds_top
    platform: partition
    name: "Notify LEDs Top"
    internal: false
    segments:
      - id: leds
        from: 26
        to: 29
    
  # nightlight color
  - platform: rgb
    name: "Nightlight Color"
    restore_mode: RESTORE_DEFAULT_ON
    red: nightlight_active_red
    green: nightlight_active_green
    blue: nightlight_active_blue

  # button active colors
  - id: button_1_active_color
    platform: rgb
    restore_mode: RESTORE_DEFAULT_ON
    name: "Button 1 Active Color"
    red: button_1_active_red
    green: button_1_active_green
    blue: button_1_active_blue
    on_state:
      then:
        - script.execute: 
            id: reset_button_leds
            btn: 1
  - id: button_2_active_color
    platform: rgb
    restore_mode: RESTORE_DEFAULT_ON
    name: "Button 2 Active Color"
    red: button_2_active_red
    green: button_2_active_green
    blue: button_2_active_blue
    on_state:
      then:
        - script.execute: 
            id: reset_button_leds
            btn: 2
  - id: button_3_active_color
    platform: rgb
    restore_mode: RESTORE_DEFAULT_ON
    name: "Button 3 Active Color"
    red: button_3_active_red
    green: button_3_active_green
    blue: button_3_active_blue
    on_state:
      then:
        - script.execute: 
            id: reset_button_leds
            btn: 3
  - id: button_4_active_color
    platform: rgb
    restore_mode: RESTORE_DEFAULT_ON
    name: "Button 4 Active Color"
    red: button_4_active_red
    green: button_4_active_green
    blue: button_4_active_blue
    on_state:
      then:
        - script.execute: 
            id: reset_button_leds
            btn: 4

number:
  - id: button_touch_decay
    name: "Touch Decay"
    platform: template
    unit_of_measurement: "ms"
    mode: SLIDER
    min_value: 10
    max_value: 1000
    step: 10
    device_class: duration
    lambda: !lambda return id(button_touch_decay_ms);
    set_action:
      then:
        - lambda: !lambda id(button_touch_decay_ms) = x;

  - id: button_normal_brightness
    name: "Button Normal Brightness"
    platform: template
    unit_of_measurement: "%"
    mode: SLIDER
    min_value: 0
    max_value: 100
    step: 1
    device_class: duration
    lambda: !lambda return id(global_brightness)[1] / 255.0 * 100;
    set_action:
      - lambda: !lambda id(global_brightness)[1] = x / 100.0 * 255;
      - script.execute: update_leds


  - id: button_night_brightness
    name: "Button Night Brightness"
    platform: template
    unit_of_measurement: "%"
    mode: SLIDER
    min_value: 0
    max_value: 100
    step: 1
    device_class: duration
    lambda: !lambda return id(global_brightness)[2] / 255.0 * 100;
    set_action:
      - lambda: !lambda id(global_brightness)[2] = x / 100.0 * 255;
      - script.execute: update_leds

  - id: button_touch_brightness
    name: "Button Touch Brightness"
    platform: template
    unit_of_measurement: "%"
    mode: SLIDER
    min_value: 0
    max_value: 100
    step: 1
    device_class: duration
    lambda: !lambda return id(global_brightness)[3] / 255.0 * 100;
    set_action:
      - lambda: !lambda id(global_brightness)[3] = x / 100.0 * 255;
      - script.execute: update_leds

sensor:
  - id: touch_x
    platform: template
    name: Touch (x)
    unit_of_measurement: "x"
    icon: "mdi:crosshairs"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - delta: 0.1
  - id: touch_state
    platform: template
    name: Touch State
    icon: "mdi:state-machine"

text_sensor:
  - id: button_1_touch
    platform: template
    name: "Button 1 Touch"
    icon: "mdi:gesture-tap"
  - id: button_2_touch
    platform: template
    name: "Button 2 Touch"
    icon: "mdi:gesture-tap"
  - id: button_3_touch
    platform: template
    name: "Button 3 Touch"
    icon: "mdi:gesture-tap"
  - id: button_4_touch
    platform: template
    name: "Button 4 Touch"
    icon: "mdi:gesture-tap"

output:
  # nightlight color
  - id: nightlight_active_red
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[0] = state * 255.0;
  - id: nightlight_active_green
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[1] = state * 255.0;
  - id: nightlight_active_blue
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[2] = state * 255.0;

  # button 1 color
  - id: button_1_active_red
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[3] = state * 255.0;
  - id: button_1_active_green
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[4] = state * 255.0;
  - id: button_1_active_blue
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[5] = state * 255.0;

  # button 2 color
  - id: button_2_active_red
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[6] = state * 255.0;
  - id: button_2_active_green
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[7] = state * 255.0;
  - id: button_2_active_blue
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[8] = state * 255.0;

  # button 3 color
  - id: button_3_active_red
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[9] = state * 255.0;
  - id: button_3_active_green
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[10] = state * 255.0;
  - id: button_3_active_blue
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[11] = state * 255.0;

  # button 4 color
  - id: button_4_active_red
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[12] = state * 255.0;
  - id: button_4_active_green
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[13] = state * 255.0;
  - id: button_4_active_blue
    platform: template
    type: float
    write_action: 
      - lambda: !lambda id(active_color)[14] = state * 255.0;

media_player:
  - id: media_out
    platform: i2s_audio
    name: Player
    dac_type: external
    i2s_dout_pin: ${audio_sdata_pin}
    i2s_audio_id: audio_i2s
    i2s_comm_fmt: lsb    
    mode: mono

i2s_audio:
  id: audio_i2s
  i2s_lrclk_pin: ${audio_lrclk_pin}
  i2s_bclk_pin: ${audio_bclk_pin}

uart:
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  id: my_uart
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  parity: NONE
  debug:
    direction: RX
    dummy_receiver: false
    after:
      timeout: 2s
      bytes: 2048
    sequence:
      - lambda: UARTDebug::log_hex(direction, bytes, ' ');

binary_sensor:
  - id: swipe_left
    platform: template
    name: "Swipe left"
    on_press:
      - delay: !lambda return id(button_touch_decay_ms);
      - binary_sensor.template.publish:
          id: swipe_left
          state: OFF

  - id: swipe_right
    platform: template
    name: "Swipe_right"
    on_press:
      - delay: !lambda return id(button_touch_decay_ms);
      - binary_sensor.template.publish:
          id: swipe_right
          state: OFF

  - id: multi_touch
    platform: template
    name: "Multi Touch"
    on_press:
      - delay: !lambda return id(button_touch_decay_ms);
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF

tx_ultimate_touch:
  id: tx_touch
  uart: my_uart

  on_press:
    - then:
      - lambda: !lambda id(touch_x).publish_state(touch.x);
      - lambda: !lambda id(touch_state).publish_state(touch.state);
      # - lambda: !lambda id(touch_y).publish_state(touch.y);
      - if:
          condition:
            lambda: !lambda return touch.x <= 2;
          then:
            - script.execute: 
                id: global_button_event
                btn: 1
                eventtype: "press"
          else:
            - if:
                condition:
                  lambda: !lambda return touch.x <= 5;
                then:
                  - script.execute: 
                      id: global_button_event
                      btn: 2
                      eventtype: "press"
                else:
                  - if:
                      condition:
                        lambda: !lambda return touch.x <= 8;
                      then:
                        - script.execute: 
                            id: global_button_event
                            btn: 3
                            eventtype: "press"
                      else:
                        - script.execute: 
                            id: global_button_event
                            btn: 4
                            eventtype: "press"
      - lambda: !lambda >
          ESP_LOGD("tx_ultimate_touch.on_press", "Touch Position: %d / State: %d", touch.x, touch.state);

  on_release:
    - then:
      - lambda: !lambda id(touch_x).publish_state(touch.x);
      - lambda: !lambda id(touch_state).publish_state(touch.state);
      # - lambda: !lambda id(touch_y).publish_state(touch.y);
      - if:
          condition:
            lambda: !lambda return touch.x <= 2;
          then:
            - script.execute: 
                id: global_button_event
                btn: 1
                eventtype: "release"
          else:
            - if:
                condition:
                  lambda: !lambda return touch.x <= 5;
                then:
                  - script.execute: 
                      id: global_button_event
                      btn: 2
                      eventtype: "release"
                else:
                  - if:
                      condition:
                        lambda: !lambda return touch.x <= 8;
                      then:
                        - script.execute: 
                            id: global_button_event
                            btn: 3
                            eventtype: "release"
                      else:
                        - script.execute: 
                            id: global_button_event
                            btn: 4
                            eventtype: "release"
      - switch.turn_on: motor
      - lambda: !lambda >
          ESP_LOGD("tx_ultimate_touch.on_release", "Release Position: %d / State: %d", touch.x, touch.state);

  on_swipe_left:
    - then:
      - lambda: !lambda id(touch_x).publish_state(touch.x);
      - lambda: !lambda id(touch_state).publish_state(touch.state);
      # - lambda: !lambda id(touch_y).publish_state(touch.y);
      - binary_sensor.template.publish:
          id: swipe_left
          state: ON
      - lambda: !lambda >
          ESP_LOGD("tx_ultimate_touch.on_swipe_left", "Swipe Left Position: %d / State: %d", touch.x, touch.state);

  on_swipe_right:
    - then:
      - lambda: !lambda id(touch_x).publish_state(touch.x);
      - lambda: !lambda id(touch_state).publish_state(touch.state);
      # - lambda: !lambda id(touch_y).publish_state(touch.y);
      - binary_sensor.template.publish:
          id: swipe_right
          state: ON
      - lambda: !lambda >
          ESP_LOGD("tx_ultimate_touch.on_swipe_right", "Swipe Right Position: %d / State: %d", touch.x, touch.state);

  on_full_touch_release:
    - then:
      - lambda: !lambda id(touch_x).publish_state(touch.x);
      - lambda: !lambda id(touch_state).publish_state(touch.state);
      # - lambda: !lambda id(touch_y).publish_state(touch.y);
      - binary_sensor.template.publish:
          id: multi_touch
          state: ON
      - lambda: !lambda >
          ESP_LOGD("tx_ultimate_touch.on_full_touch_release", "Full Touch Release Position: %d / State: %d", touch.x, touch.state);

  on_long_touch_release:      
    - then:
      - lambda: !lambda id(touch_x).publish_state(touch.x);
      - lambda: !lambda id(touch_state).publish_state(touch.state);
      # - lambda: !lambda id(touch_y).publish_state(touch.y);
      - if:
          condition:
            lambda: !lambda return touch.x <= 2;
          then:
            - script.execute: 
                id: global_button_event
                btn: 1
                eventtype: "long_release"
          else:
            - if:
                condition:
                  lambda: !lambda return touch.x <= 5;
                then:
                  - script.execute: 
                      id: global_button_event
                      btn: 2
                      eventtype: "long_release"
                else:
                  - if:
                      condition:
                        lambda: !lambda return touch.x <= 8;
                      then:
                        - script.execute: 
                            id: global_button_event
                            btn: 3
                            eventtype: "long_release"
                      else:
                        - script.execute: 
                            id: global_button_event
                            btn: 4
                            eventtype: "long_release"
      - switch.turn_on: motor
      - lambda: !lambda >
          ESP_LOGD("tx_ultimate_touch.on_release", "Release Position: %d / State: %d", touch.x, touch.state);
      - lambda: !lambda >
          ESP_LOGD("tx_ultimate_touch.on_long_touch_release", "Long Touch Release Position: %d / State: %d", touch.x, touch.state);

script:
  # generally: reset leds based on the current state
  - id: update_leds
    mode: restart
    then:
      # reset the buttons' states
      - delay: 100ms
      - script.execute: reset_buttons_leds

  - id: global_button_event
    mode: restart
    parameters:
      btn: int
      eventtype: string
    then:
      - switch.turn_on:
          id: motor
      - script.execute:
          id: send_event
          domain: "button"
          eventtype: !lambda return eventtype;
          index: !lambda return btn;
      - script.execute:
          id: reset_button_leds
          btn: !lambda return btn;
      - lambda: !lambda >
          if (btn == 1) id(button_1_touch).publish_state(eventtype);
          if (btn == 2) id(button_2_touch).publish_state(eventtype);
          if (btn == 3) id(button_3_touch).publish_state(eventtype);
          if (btn == 4) id(button_4_touch).publish_state(eventtype);
      

  - id: toggle_button
    mode: restart
    parameters: 
      btn: int
    then:
      - lambda: !lambda >
          if (btn == 1) id(button_1).toggle();
          if (btn == 2) id(button_2).toggle();
          if (btn == 3) id(button_3).toggle();
          if (btn == 4) id(button_4).toggle();
  
  - id: button_off
    mode: restart
    parameters: 
      btn: int
    then:
      - lambda: !lambda >
          bool relay_att = id(relay_attached)[btn];

          if (relay_att) {
            if (btn == 1) id(relay_1).turn_off();
            else if (btn == 2) id(relay_2).turn_off();
            else if (btn == 3) id(relay_3).turn_off();
            else if (btn == 4) id(relay_4).turn_off();
          }
          id(virtual_relay_state)[btn] = false;
      - delay: 100ms
      - script.execute: 
          id: reset_button_leds
          btn: !lambda return btn;
  - id: button_on
    mode: restart
    parameters: 
      btn: int
    then:
      - lambda: !lambda >
          bool relay_att = id(relay_attached)[btn];

          if (relay_att) {
            if (btn == 1) id(relay_1).turn_on();
            else if (btn == 2) id(relay_2).turn_on();
            else if (btn == 3) id(relay_3).turn_on();
            else if (btn == 4) id(relay_4).turn_on();
          }
          id(virtual_relay_state)[btn] = true;
      - delay: 100ms
      - script.execute: 
          id: reset_button_leds
          btn: !lambda return btn;


  # ==== EVENTS ====
  - id: send_event
    mode: restart
    parameters: 
      domain: string
      eventtype: string
      index: int
    then:
      - lambda: !lambda |-
          ESP_LOGD("script", "send event %s.%s-%d", domain, eventtype, index);

  # ==== NOTIFICATIONS ====
  # ==== NIGHTLIGHT ====

  - id: initstates
    mode: restart
    then:
      
      - lambda: !lambda |-
          ESP_LOGD("script", "Initializing...");

  - id: reset_buttons_leds
    mode: restart
    then:
      - script.execute: 
          id: reset_button_leds
          btn: 1
      - script.execute: 
          id: reset_button_leds
          btn: 2
      - script.execute: 
          id: reset_button_leds
          btn: 3
      - script.execute: 
          id: reset_button_leds
          btn: 4 

  - id: reset_button_leds
    mode: restart
    parameters:
      btn: int
    then:
      - script.execute:
          id: set_button_leds
          btn: !lambda return btn;
          transition_type: -1           

  - id: set_button_leds
    mode: restart
    parameters: 
      btn: int
      transition_type: int
    then: 
      - lambda: !lambda >
          ESP_LOGD("study-switch.set_button_leds", "button: %d, transition_type: %d", btn, transition_type);
          auto relay_att = id(relay_attached)[btn];
          auto virtual_on = id(virtual_relay_state)[btn];

          auto relay_on = id(relay_1).state;
          if (btn == 1) relay_on = id(relay_1).state;
          else if (btn == 2) relay_on = id(relay_2).state;
          else if (btn == 3) relay_on = id(relay_3).state;
          else if (btn == 4) relay_on = id(relay_4).state;

          auto is_on = (relay_att && relay_on) || (!relay_att && virtual_on);
          
          ESP_LOGD("study-switch.set_button_leds", "relay_att: %s virtual_on: %s relay_on: %s", relay_att ? "true" : "false", virtual_on ? "true" : "false", relay_on ? "true" : "false");

          if (transition_type < 0) {
            if (is_on) {
              transition_type = 1;
              if (id(night_mode).state) transition_type = 2;
            } else {
              transition_type = 0;
            }
          }
          ESP_LOGD("study-switch.set_button_leds", "transition_type: %d", transition_type);

          auto brightness_level = id(global_brightness)[transition_type] / 255.0;
          auto transition_ms = id(global_transition_ms)[transition_type];

          ESP_LOGD("study-switch.set_button_leds", "brightness: %f, transition_ms: %d", brightness_level, transition_ms);

          float r = id(active_color)[btn * 3 + 0];
          float g = id(active_color)[btn * 3 + 1];
          float b = id(active_color)[btn * 3 + 2];
          ESP_LOGD("study-switch.set_button_leds", "r: %f, g: %f, b: %f", r, g, b);

          // set parameters (optional)
          
          if (btn == 1) id(button_1_leds).turn_on().set_transition_length(transition_ms).set_brightness(brightness_level).set_color_mode(ColorMode::RGB).set_rgb(r / 255.0, g / 255.0, b / 255.0).perform();
          else if (btn == 2) id(button_2_leds).turn_on().set_transition_length(transition_ms).set_brightness(brightness_level).set_color_mode(ColorMode::RGB).set_rgb(r / 255.0, g / 255.0, b / 255.0).perform();
          else if (btn == 3) id(button_3_leds).turn_on().set_transition_length(transition_ms).set_brightness(brightness_level).set_color_mode(ColorMode::RGB).set_rgb(r / 255.0, g / 255.0, b / 255.0).perform();
          else if (btn == 4) id(button_4_leds).turn_on().set_transition_length(transition_ms).set_brightness(brightness_level).set_color_mode(ColorMode::RGB).set_rgb(r / 255.0, g / 255.0, b / 255.0).perform();

          ESP_LOGD("study-switch.set_button_leds", "Done"); 

